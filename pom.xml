<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mavor</groupId>
  <artifactId>spring-framework-project-todos</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>spring-framework-project-todos</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <!-- Spring Context -->
    <!-- Spring Context provides access to configured objects like a registry (a context). It
    inherits its features from Spring Beans and adds support for internationalization, event
    propagation, resource loading, and the transparent creation of contexts.  -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>6.1.14</version>
    </dependency>
    <!-- Spring Beans -->
    <!-- Spring Beans provides the configuration framework and basic functionality to instantiate,
    configure, and assemble java objects.  -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>6.1.14</version>
    </dependency>
    <!-- Spring Core -->
    <!-- Basic building block for Spring that in conjunction with Spring Beans provides dependency
    injection and IoC features.  -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>6.1.14</version>
    </dependency>
    <!-- Spring Web -->
    <!-- Spring webmvc contains Springâ€™s model-view-controller (MVC) and REST Web Services
    implementation for web applications. It provides a clean separation between domain model code
    and web forms and integrates with all of the other features of the Spring Framework.  -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>6.1.14</version>
    </dependency>
    <!-- Servlet API -->
    <!-- Java Servlet is the foundation web specification in the Java Enterprise Platform.
    Developers can build web applications using the Servlet API to interact with the
    request/response workflow.  -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>4.0.1</version>
      <scope>provided</scope>
    </dependency>
    <!-- JSTL -->
    <!-- JUnit is a unit testing framework to write and run repeatable automated tests on Java. It
    provides a robust environment to write, organize, and execute automated tests, ensuring code
    reliability and repeatability. Its user-friendly annotations and assert methods facilitate the
    development and running of test cases, making it a foundational tool for Java developers
    focusing on quality assurance and test-driven development.  -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
    <!-- Logback Classic -->
    <!-- Logback is a logging framework that is intended as a successor to the popular log4j
    project.
    It is faster, more reliable, and more flexible than log4j. It is intended for use in both small
    and large applications.  -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>1.5.11</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.5.11</version>
    </dependency>

    <!-- SLF4J API -->
    <!-- API for SLF4J (The Simple Logging Facade for Java) which serves as a simple facade or
    abstraction for various logging frameworks, allowing the end user to plug in the desired logging
    framework at deployment time.  -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>2.0.16</version>
    </dependency>
    <!-- Spring Data JPA -->
    <!-- Spring Data JPA is a part of the larger Spring Data family. It makes it easy to use data
    access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-
    based data services. This is an umbrella project which contains many subprojects that are
    specific to a given database. The projects are developed by working together with many of the
    companies and developers that are behind these exciting technologies.  -->
    <dependency>
      <groupId>org.springframework.data</groupId>
      <artifactId>spring-data-jpa</artifactId>
      <version>3.3.5</version>
    </dependency>
    <dependency>
      <groupId>jakarta.persistence</groupId>
      <artifactId>jakarta.persistence-api</artifactId>
      <version>3.2.0</version>
    </dependency>
    <!-- H2 Database -->
    <!-- H2 is an open-source lightweight Java database. It can be embedded in Java applications or
    run in the client-server mode.  -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>2.3.232</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.hibernate.orm</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>6.1.7.Final</version>
    </dependency>

    <!-- REST Assured -->
    <!-- REST Assured is a Java library that provides a domain-specific language (DSL) for writing
    powerful, maintainable tests for RESTful APIs. It is a Java-based library that is used to test
    RESTful Web Services. This library behaves like a headless Client to access REST web services.  -->
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>spring-web-test-client</artifactId>
      <version>5.5.0</version>
      <scope>test</scope>
    </dependency>
    <!-- Cucumber Java -->
    <!-- Cucumber is a testing framework that supports behavior-driven development (BDD). It lets
    you write test cases using human-readable sentences. Cucumber itself is written in Ruby, but it
    can be used to test code written in Ruby, Java, or any other language. It is often used for
    testing web applications.  -->
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-java</artifactId>
      <version>7.20.1</version>
      <scope>test</scope>
    </dependency>
    <!-- Jetty -->
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>12.0.14</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.ee10</groupId>
      <artifactId>jetty-ee10-servlet</artifactId>
      <version>12.0.14</version>
    </dependency>
    <!-- Jackson -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.18.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>2.18.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>2.18.0</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>11</source>
                <target>11</target>
                <compilerArgs>
                    <arg>-parameters</arg>
                </compilerArgs>
            </configuration>
        </plugin>
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.0.0</version>
            <configuration>
                <mainClass>com.mavor.App</mainClass>
            </configuration>
        </plugin>
    </plugins>
</build>
</project>